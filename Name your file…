Enter file contents here//*** HDSP2000
//*** ASCII-DEMO
//*** phuinink@gmail.com
//*** Paul Huinink has a webpage on displays www.huinink.info and specifically HDSP200X series displays www.spagmon.com
//*** Modified December-2013 by Patrick Hickey: added HP HDSP single digit display and RGB LED
//*** Patrick Hickey ph@nipht.com

// here is the code....

// an array of 5 bytes per ASCII
// 5 bytes cause 5 columns
// 7 bits per column (no LSB)
const byte ascii_5x7[] = {
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xF2, 0x00, 0x00,// !
  0x00, 0xE0, 0x00, 0xE0, 0x00,// "
  0x28, 0xFE, 0x28, 0xFE, 0x28,// #
  0x24, 0x54, 0xFE, 0x54, 0x48,// $
  0xC4, 0xC8, 0x10, 0x26, 0x46,// %
  0x6C, 0x92, 0xAA, 0x44, 0x0A,// &amp;
  0x00, 0xA0, 0xC0, 0x00, 0x00,// 39
  0x00, 0x38, 0x44, 0x82, 0x00,// 40
  0x00, 0x82, 0x44, 0x38, 0x00,// 41
  0x28, 0x10, 0x7C, 0x10, 0x28,// *
  0x10, 0x10, 0x7C, 0x10, 0x10,
  0x00, 0x0A, 0x0C, 0x00, 0x00,
  0x10, 0x10, 0x10, 0x10, 0x10,
  0x00, 0x06, 0x06, 0x00, 0x00,
  0x04, 0x08, 0x10, 0x20, 0x40,
  0x7C, 0x8A, 0x92, 0xA2, 0x7C,//48 0
  0x00, 0x42, 0xFE, 0x02, 0x00,//49 1
  0x42, 0x86, 0x8A, 0x92, 0x62,//50 2
  0x84, 0x82, 0xA2, 0xD2, 0x8C,
  0x18, 0x28, 0x48, 0xFE, 0x08,
  0xE4, 0xA2, 0xA2, 0xA2, 0x9C,
  0x3C, 0x52, 0x92, 0x92, 0x0C,
  0x80, 0x8E, 0x90, 0xA0, 0xC0,
  0x6C, 0x92, 0x92, 0x92, 0x6C,
  0x60, 0x92, 0x92, 0x94, 0x78,
  0x00, 0x6C, 0x6C, 0x00, 0x00,
  0x00, 0x6A, 0x6C, 0x00, 0x00,
  0x10, 0x28, 0x44, 0x82, 0x00,
  0x28, 0x28, 0x28, 0x28, 0x28,
  0x00, 0x82, 0x44, 0x28, 0x10,
  0x40, 0x80, 0x8A, 0x90, 0x60,
  0x4C, 0x92, 0x9E, 0x82, 0x7C,
  0x7E, 0x88, 0x88, 0x88, 0x7E,//65 A
  0xFE, 0x92, 0x92, 0x92, 0x6C,
  0x7C, 0x82, 0x82, 0x82, 0x44,
  0xFE, 0x82, 0x82, 0x44, 0x38,
  0xFE, 0x92, 0x92, 0x92, 0x82,
  0xFE, 0x90, 0x90, 0x90, 0x80,// 70
  0x7C, 0x82, 0x92, 0x92, 0x5E,
  0xFE, 0x10, 0x10, 0x10, 0xFE,
  0x00, 0x82, 0xFE, 0x82, 0x00,
  0x04, 0x02, 0x82, 0xFC, 0x80,
  0xFE, 0x10, 0x28, 0x44, 0x82,
  0xFE, 0x02, 0x02, 0x02, 0x02,
  0xFE, 0x40, 0x30, 0x40, 0xFE,
  0xFE, 0x20, 0x10, 0x08, 0xFE,
  0x7C, 0x82, 0x82, 0x82, 0x7C,
  0xFE, 0x90, 0x90, 0x90, 0x60,// P
  0x7C, 0x82, 0x8A, 0x84, 0x7A,
  0xFE, 0x90, 0x98, 0x94, 0x62,
  0x62, 0x92, 0x92, 0x92, 0x8C,
  0x80, 0x80, 0xFE, 0x80, 0x80,
  0xFC, 0x02, 0x02, 0x02, 0xFC,
  0xF8, 0x04, 0x02, 0x04, 0xF8,
  0xFC, 0x02, 0x0C, 0x02, 0xFC,
  0xC6, 0x28, 0x10, 0x28, 0xC6,
  0xE0, 0x10, 0x0E, 0x10, 0xE0,
  0x86, 0x8A, 0x92, 0xA2, 0xC2,
  0x00, 0xFE, 0x82, 0x82, 0x00,
  0x40, 0x20, 0x10, 0x08, 0x04,
  0x00, 0x82, 0x82, 0xFE, 0x00,
  0x20, 0x40, 0x80, 0x40, 0x20,
  0x02, 0x02, 0x02, 0x02, 0x02,
  0x00, 0x80, 0x40, 0x20, 0x00,
  0x04, 0x2A, 0x2A, 0x2A, 0x1E,
  0xFE, 0x12, 0x12, 0x12, 0x0C,
  0x1C, 0x22, 0x22, 0x22, 0x22,
  0x0C, 0x12, 0x12, 0x12, 0xFE,// 100 d
  0x1C, 0x2A, 0x2A, 0x2A, 0x1A,// 101 e
  0x00, 0x10, 0x7E, 0x90, 0x40,
  0x12, 0x2A, 0x2A, 0x2A, 0x3C,
  0xFE, 0x10, 0x10, 0x10, 0x0E,
  0x00, 0x00, 0x5E, 0x00, 0x00,
  0x04, 0x02, 0x02, 0xBC, 0x00,
  0x00, 0xFE, 0x08, 0x14, 0x22,
  0x00, 0x82, 0xFE, 0x02, 0x00,
  0x3E, 0x20, 0x1C, 0x20, 0x3E,
  0x3E, 0x10, 0x20, 0x20, 0x1E,
  0x1C, 0x22, 0x22, 0x22, 0x1C,
  0x3E, 0x28, 0x28, 0x28, 0x10,
  0x10, 0x28, 0x28, 0x28, 0x3E,
  0x3E, 0x10, 0x20, 0x20, 0x10,
  0x12, 0x2A, 0x2A, 0x2A, 0x24,
  0x20, 0x20, 0xFC, 0x22, 0x24,
  0x3C, 0x02, 0x02, 0x02, 0x3C,
  0x38, 0x04, 0x02, 0x04, 0x38,
  0x3C, 0x02, 0x0C, 0x02, 0x3C,// x
  0x22, 0x14, 0x08, 0x14, 0x22,// y
  0x20, 0x12, 0x0C, 0x10, 0x20,// z
  0x22, 0x26, 0x2A, 0x32, 0x22,//123 {
  0x00, 0x10, 0x6C, 0x82, 0x82,//124 |
  0x00, 0x00, 0xEE, 0x00, 0x00,//125 }
  0x82, 0x82, 0x6C, 0x10, 0x00,
  0x20, 0x40, 0x40, 0x40, 0x80,
  0xA8, 0x68, 0x3E, 0x68, 0xA8,
  0xBE, 0x2A, 0x2A, 0x2A, 0xA2,
  0x00, 0x20, 0x50, 0xA0, 0x00,
  0x04, 0x22, 0x7C, 0xA0, 0x40,
  0x84, 0xFC, 0x04, 0x00, 0x20,
  0xFE, 0x02, 0x02, 0x12, 0x02,
  0x1C, 0x22, 0x14, 0x08, 0x36,
  0x4E, 0x3E, 0x60, 0x40, 0x40,
  0x0C, 0x12, 0x52, 0xB2, 0x1C,//136 Ãª
  0x08, 0x1C, 0x2A, 0x2A, 0x2A,
  0xF8, 0x40, 0x40, 0x3C, 0x02,
  0x7C, 0x92, 0x92, 0x7C, 0x00,
  0x42, 0x44, 0x38, 0x04, 0x02,
  0x20, 0x3E, 0x20, 0x3E, 0x22,
  0x10, 0x20, 0x3C, 0x22, 0x20,
  0x18, 0x24, 0x7E, 0x24, 0x18,
  0x1C, 0x22, 0x0C, 0x22, 0x1C,
  0x82, 0xC6, 0xAA, 0x92, 0x82,
  0x3A, 0x46, 0x40, 0x46, 0x3A,
  0x54, 0x54, 0x54, 0x54, 0x54,
  0x44, 0x28, 0x10, 0x28, 0x44,
  0x10, 0x10, 0x54, 0x10, 0x10,
  0x00, 0x70, 0x88, 0x88, 0x70,
  0x60, 0x90, 0x8A, 0x80, 0x40,
  0xFE, 0xFE, 0x92, 0x92, 0x92,
  0x0A, 0x1A, 0x2A, 0x4A, 0x8A,
  0x8A, 0x4A, 0x2A, 0x1A, 0x0A,
  0x28, 0x2C, 0x38, 0x68, 0x28,
  0x04, 0xFE, 0x80, 0x80, 0x80,
  0x4C, 0x92, 0x92, 0x7C, 0x00,//157 Ã˜
  0x04, 0x02, 0x7C, 0x80, 0x40,
  0x38, 0x44, 0x38, 0x44, 0x38,
  0xAA, 0x54, 0xAA, 0x54, 0xAA,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xBE, 0x00, 0x00,
  0x38, 0x44, 0xFE, 0x44, 0x00,
  0x12, 0x7E, 0x92, 0x92, 0x42,
  0xBA, 0x44, 0x44, 0x44, 0xBA,
  0xA8, 0x68, 0x3E, 0x68, 0xA8,
  0x00, 0x00, 0xEE, 0x00, 0x00,
  0x50, 0xAA, 0xAA, 0xAA, 0x14,
  0x00, 0x80, 0x00, 0x80, 0x00,
  0x7C, 0xBA, 0xAA, 0xAA, 0x7C,
  0x12, 0xAA, 0xAA, 0xAA, 0x7A,
  0x10, 0x28, 0x54, 0xAA, 0x44,
  0x80, 0x80, 0x80, 0x80, 0xC0,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x7C, 0xAA, 0xBA, 0x82, 0x7C,
  0x80, 0x80, 0x80, 0x80, 0x80,
  0x00, 0xE0, 0xA0, 0xE0, 0x00,
  0x22, 0x22, 0xFA, 0x22, 0x22,
  0x00, 0x48, 0x98, 0xA8, 0x48,
  0x00, 0x00, 0xA8, 0xA8, 0x70,
  0x00, 0x00, 0x40, 0x80, 0x00,
  0x04, 0xF8, 0x10, 0x10, 0xE0,
  0x60, 0xFE, 0x80, 0xFE, 0x80,
  0x00, 0x00, 0x10, 0x10, 0x00,
  0x08, 0x00, 0x02, 0x04, 0x00,
  0x00, 0x48, 0xF8, 0x08, 0x00,
  0x00, 0xE8, 0xA8, 0xE8, 0x00,
  0x44, 0xAA, 0x54, 0x28, 0x10,
  0xF0, 0x04, 0x0C, 0x14, 0x2E,
  0xF0, 0x00, 0x12, 0x26, 0x1A,
  0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
  0x0C, 0x12, 0xA2, 0x02, 0x04,
  0x1E, 0xA8, 0x68, 0x28, 0x1E,
  0x1E, 0x28, 0x68, 0xA8, 0x1E,
  0x1E, 0xA8, 0xA8, 0xA8, 0x1E,
  0x9E, 0xA8, 0xA8, 0xA8, 0x9E,
  0x9E, 0x28, 0x28, 0x28, 0x9E,
  0x1E, 0x68, 0xA8, 0x68, 0x1E,
  0x7E, 0x90, 0xFE, 0x92, 0x92,
  0x70, 0x8A, 0x8C, 0x88, 0x88,
  0x3E, 0xAA, 0x6A, 0x2A, 0x22,
  0x3E, 0x2A, 0x6A, 0xAA, 0x22,
  0x3E, 0xAA, 0xAA, 0xAA, 0x22,
  0xBE, 0x2A, 0x2A, 0x2A, 0xA2,
  0x00, 0xA2, 0x7E, 0x22, 0x00,
  0x00, 0x22, 0x7E, 0xA2, 0x00,
  0x00, 0xA2, 0xBE, 0xA2, 0x00,
  0x00, 0xA2, 0x3E, 0xA2, 0x00,
  0x10, 0xFE, 0x92, 0x82, 0x7C,
  0xBE, 0x90, 0x88, 0x84, 0xBE,
  0x1C, 0xA2, 0x62, 0x22, 0x1C,
  0x1C, 0x22, 0x62, 0xA2, 0x1C,
  0x1C, 0xA2, 0xA2, 0xA2, 0x1C,
  0x9C, 0xA2, 0xA2, 0xA2, 0x9C,
  0x9C, 0x22, 0x22, 0x22, 0x9C,
  0x44, 0x28, 0x10, 0x28, 0x44,
  0x3A, 0x4C, 0x54, 0x64, 0xB8,
  0x3C, 0x82, 0x42, 0x02, 0x3C,
  0x3C, 0x02, 0x42, 0x82, 0x3C,
  0x3C, 0x82, 0x82, 0x82, 0x3C,
  0xBC, 0x02, 0x02, 0x02, 0xBC,
  0x60, 0x10, 0x4E, 0x90, 0x60,
  0xFE, 0x44, 0x44, 0x44, 0x38,
  0x7E, 0xA4, 0xA4, 0x58, 0x00,
  0x04, 0xAA, 0x6A, 0x2A, 0x1E,
  0x04, 0x2A, 0x6A, 0xAA, 0x1E,
  0x04, 0xAA, 0xAA, 0xAA, 0x1E,
  0x84, 0xAA, 0xAA, 0xAA, 0x9E,
  0x04, 0xAA, 0x2A, 0xAA, 0x1E,
  0x04, 0x6A, 0xAA, 0x6A, 0x1E,
  0x2E, 0x2A, 0x1C, 0x2A, 0x3A,
  0x30, 0x4A, 0x4C, 0x48, 0x00,
  0x1C, 0xAA, 0x6A, 0x2A, 0x1A,
  0x1C, 0x2A, 0x6A, 0xAA, 0x1A,
  0x1C, 0xAA, 0xAA, 0xAA, 0x1A,
  0x1C, 0xAA, 0x2A, 0xAA, 0x1A,
  0x00, 0x80, 0x5E, 0x00, 0x00,
  0x00, 0x00, 0x5E, 0x80, 0x00,
  0x00, 0x40, 0x5E, 0x40, 0x00,
  0x00, 0x40, 0x1E, 0x40, 0x00,
  0x0C, 0x12, 0x52, 0xB2, 0x1C,
  0xBE, 0x90, 0xA0, 0xA0, 0x9E,
  0x0C, 0x92, 0x52, 0x12, 0x0C,
  0x0C, 0x12, 0x52, 0x92, 0x0C,
  0x0C, 0x52, 0x52, 0x52, 0x0C,
  0x4C, 0x52, 0x52, 0x52, 0x4C,
  0x0C, 0x52, 0x12, 0x52, 0x0C,
  0x10, 0x10, 0x10, 0x54, 0x10,
  0x18, 0x26, 0x3C, 0x64, 0x18,
  0x1C, 0x82, 0x42, 0x02, 0x1C,
  0x1C, 0x02, 0x42, 0x82, 0x1C,
  0x1C, 0x42, 0x42, 0x42, 0x1C,
  0x1C, 0x42, 0x02, 0x42, 0x1C,
  0x20, 0x12, 0x4C, 0x90, 0x20,
  0xFE, 0x48, 0x48, 0x30, 0x00,
  0x20, 0x92, 0x0C, 0x90, 0x20
};

int column[] = {
  8,7,6,5,4}; // change this to other general input/output arduino-pins as you like
int data = 2;   // change this to other general input/output arduino-pins as you like
int clock = 3;  // change this to other general input/output arduino-pins as you like



int latchPin1 = 12;
//Pin connected to LATCH OF HDSP SMART DSPLY
int dpPin1 = 13;
int dpPin2 = 51;
int LEDPinR = 9; //RGB LED VIA RESISTORs
int LEDPinG = 10;//RGB LED VIA RESISTORs
int LEDPinB = 11;//RGB LED VIA RESISTORs


int digit1pin = A0; //BCD for digit 1
int digit2pin = A1; //BCD for digit 2
int digit3pin = A2; //BCD for digit 3
int digit4pin = A3; //BCD for digit 4

int brightness = 1500; // keep high for max visibility. To high will cause flikkering 
const int numberOflDisplays = 1; // change this if total number of HDSP200x's is different.

int tekstDat[numberOflDisplays* 4 * 5]; // this is the array that store's what on the displays. 4 digits per display and 5 columns per digit.

unsigned long tijd; // used to trigger events in one of the examples below

void setup(){
  Serial.begin(9600);
  for (int i = 0; i &lt; 5; i++){
    pinMode(column[i], OUTPUT);
  }
  for (int i = 0; i &lt; 5; i++){
    digitalWrite(column[i], LOW);
  }
  pinMode(data, OUTPUT);
  pinMode(clock, OUTPUT);
  digitalWrite(data, LOW);
  digitalWrite(clock, HIGH);
  tijd = millis();
  
    //set pins to output so you can control the shift register
  pinMode(latchPin1, OUTPUT);

  pinMode(dpPin1, OUTPUT); //Decimal Point PIN OF HDSP - LOW IS ON
  // alternative in some HDSP models is blanking
  pinMode(dpPin2, OUTPUT);
  pinMode(digit1pin, OUTPUT);
  pinMode(digit2pin, OUTPUT);
  pinMode(digit3pin, OUTPUT);
  pinMode(digit4pin, OUTPUT);
  
  //LED PINS
  
  pinMode(LEDPinR, OUTPUT);
  pinMode(LEDPinG, OUTPUT);
  pinMode(LEDPinB, OUTPUT);
   
   //HDSP BCD DATA INPUT PINS - all high = turn off display (alt F if using HEX version)
    
    digitalWrite(digit1pin, HIGH);
    digitalWrite(digit2pin, HIGH);
    digitalWrite(digit3pin, HIGH);
    digitalWrite(digit4pin, HIGH);
    
        digitalWrite(dpPin1, HIGH);
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
  
  
// basic test of the RGB led
           
        //red
        analogWrite(LEDPinR, 10);
        analogWrite(LEDPinG, 0);
        analogWrite(LEDPinB, 0);
         delay(500);
         
         //green
        analogWrite(LEDPinR, 0);
        analogWrite(LEDPinG, 10);
        analogWrite(LEDPinB, 0);
         delay(500);
        
        //blue
        analogWrite(LEDPinR, 0);
        analogWrite(LEDPinG, 0);
        analogWrite(LEDPinB, 10);
         delay(500);
      
       //off  
      digitalWrite(LEDPinR, LOW);
      digitalWrite(LEDPinG, LOW);
      digitalWrite(LEDPinB, LOW);
       
       //cyan
        analogWrite(LEDPinR, 0);
        analogWrite(LEDPinG, 10);
        analogWrite(LEDPinB, 10);
         delay(500);
         
         //pink
        analogWrite(LEDPinR, 10);
        analogWrite(LEDPinG, 0);
        analogWrite(LEDPinB, 10);
         delay(500);
        
        //yellow
        analogWrite(LEDPinR, 10);
        analogWrite(LEDPinG, 10);
        analogWrite(LEDPinB, 0);
         delay(500);
      
      
      //off  
      digitalWrite(LEDPinR, LOW);
      digitalWrite(LEDPinG, LOW);
      digitalWrite(LEDPinB, LOW);
      
               delay(30);
               
                  ///white1
        analogWrite(LEDPinR, 10);
        analogWrite(LEDPinG, 10);
        analogWrite(LEDPinB, 10);
         delay(1000);
         
         //white2
        analogWrite(LEDPinR, 20);
        analogWrite(LEDPinG, 20);
        analogWrite(LEDPinB, 20);
         delay(100);
        
        //white3
        analogWrite(LEDPinR, 30);
        analogWrite(LEDPinG, 30);
        analogWrite(LEDPinB, 30);
         delay(100);
     
      //off   
      digitalWrite(LEDPinR, LOW);
      digitalWrite(LEDPinG, LOW);
      digitalWrite(LEDPinB, LOW);
      


}

void loop(){

  char clr[] = "    ";
  
     char ten[] = "....ten...";
     char nine[] = "....nine....";
     char eight[] = "....eight...";    
     char seven[] = "....seven...";     
     char six[] = "....six...";  
       char five[] = "....five...";
         char four[] = "....four...";
        char three[] = "....three...";
       char two[] = "....two...";
       char one[] = "....one...";
         char zero[] = "....zero....";
         char hello[] = "Hello";
         char world[] = "World!!";
         
         //clear single digit display
         
  //DATA STREAM (ALL OFF)
    digitalWrite(digit1pin, HIGH);
    digitalWrite(digit2pin, HIGH);
    digitalWrite(digit3pin, HIGH);
    digitalWrite(digit4pin, HIGH);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);

  // countdown from 9 to zero  
     
    
      //DATA STREAM (9)
    digitalWrite(digit1pin, HIGH);
    digitalWrite(digit2pin, LOW);
    digitalWrite(digit3pin, LOW);
    digitalWrite(digit4pin, HIGH);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
  
    delay(5);
 
 scrollText(nine, 8);
           
  delay(300);
  
 //DATA STREAM (8)
    digitalWrite(digit1pin, LOW);
    digitalWrite(digit2pin, LOW);
    digitalWrite(digit3pin, LOW);
    digitalWrite(digit4pin, HIGH);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
 
     delay(5);
 
 scrollText(eight, 8);
 
  delay(300);
  
   //DATA STREAM (7)
    digitalWrite(digit1pin, HIGH);
    digitalWrite(digit2pin, HIGH);
    digitalWrite(digit3pin, HIGH);
    digitalWrite(digit4pin, LOW);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
 
     delay(5);
 
 scrollText(seven, 8); 
 
  delay(300);
  
  
   //DATA STREAM (6)
    digitalWrite(digit1pin, LOW);
    digitalWrite(digit2pin, HIGH);
    digitalWrite(digit3pin, HIGH);
    digitalWrite(digit4pin, LOW);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
  
    
    delay(5);
 
 scrollText(six, 8);
  
  delay(300);
   //DATA STREAM (5)
    digitalWrite(digit1pin, HIGH);
    digitalWrite(digit2pin, LOW);
    digitalWrite(digit3pin, HIGH);
    digitalWrite(digit4pin, LOW);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
  
  
    
    delay(5);
 
 scrollText(five, 8);
  delay(300);
   //DATA STREAM (4)
    digitalWrite(digit1pin, LOW);
    digitalWrite(digit2pin, LOW);
    digitalWrite(digit3pin, HIGH);
    digitalWrite(digit4pin, LOW);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
  
    
    delay(5);
 
 scrollText(four, 8);
  delay(300);
    //DATA STREAM (3)
    digitalWrite(digit1pin, HIGH);
    digitalWrite(digit2pin, HIGH);
    digitalWrite(digit3pin, LOW);
    digitalWrite(digit4pin, LOW);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
    
    delay(5);
 
 scrollText(three, 8);
  
  delay(300);
  
   //DATA STREAM (2)
    digitalWrite(digit1pin, LOW);
    digitalWrite(digit2pin, HIGH);
    digitalWrite(digit3pin, LOW);
    digitalWrite(digit4pin, LOW);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
  
    
    delay(5);
 
 scrollText(two, 8);
  delay(300);
   //DATA STREAM (1)
    digitalWrite(digit1pin, HIGH);
    digitalWrite(digit2pin, LOW);
    digitalWrite(digit3pin, LOW);
    digitalWrite(digit4pin, LOW);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
  
    delay(5);
 
 scrollText(one, 8);
  delay(300);
//DATA STREAM (0)
    digitalWrite(digit1pin, LOW);
    digitalWrite(digit2pin, LOW);
    digitalWrite(digit3pin, LOW);
    digitalWrite(digit4pin, LOW);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH);     
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH);
    
    delay(5);
 
  scrollText(zero, 8);
    delay(100);
    
    //strobe the LED full power white
        
        delay(30);
        digitalWrite(LEDPinR, HIGH);
        digitalWrite(LEDPinG, HIGH);
        digitalWrite(LEDPinB, HIGH);
         delay(30);
        digitalWrite(LEDPinR, LOW);
        digitalWrite(LEDPinG, LOW);
        digitalWrite(LEDPinB, LOW);
         delay(30);   
        digitalWrite(LEDPinR, HIGH);
        digitalWrite(LEDPinG, HIGH);
        digitalWrite(LEDPinB, HIGH);
         delay(30);
         
      digitalWrite(LEDPinR, LOW);
      digitalWrite(LEDPinG, LOW);
      digitalWrite(LEDPinB, LOW);
      
               delay(30);
        digitalWrite(LEDPinR, HIGH);
        digitalWrite(LEDPinG, HIGH);
        digitalWrite(LEDPinB, HIGH);
         delay(30);
        digitalWrite(LEDPinR, LOW);
        digitalWrite(LEDPinG, LOW);
        digitalWrite(LEDPinB, LOW);
         delay(30);   
        digitalWrite(LEDPinR, HIGH);
        digitalWrite(LEDPinG, HIGH);
        digitalWrite(LEDPinB, HIGH);
         delay(30);
         
      digitalWrite(LEDPinR, LOW);
      digitalWrite(LEDPinG, LOW);
      digitalWrite(LEDPinB, LOW);
       delay(30);  
               digitalWrite(LEDPinR, HIGH);
        digitalWrite(LEDPinG, HIGH);
        digitalWrite(LEDPinB, HIGH);
         delay(30);
        digitalWrite(LEDPinR, LOW);
        digitalWrite(LEDPinG, LOW);
        digitalWrite(LEDPinB, LOW);
         delay(30);   
        digitalWrite(LEDPinR, HIGH);
        digitalWrite(LEDPinG, HIGH);
        digitalWrite(LEDPinB, HIGH);
         delay(30);
         
      digitalWrite(LEDPinR, LOW);
      digitalWrite(LEDPinG, LOW);
      digitalWrite(LEDPinB, LOW);
       delay(30);  
       
    //DATA STREAM (CLEAR)
    digitalWrite(digit1pin, HIGH);
    digitalWrite(digit2pin, HIGH);
    digitalWrite(digit3pin, HIGH);
    digitalWrite(digit4pin, HIGH);
    digitalWrite(dpPin1, HIGH);
    digitalWrite(dpPin2, HIGH); 
  
  //WRITE DATA TO DIGIT 1
  digitalWrite(latchPin1, LOW);
  digitalWrite(latchPin1, HIGH); 

//helloworld
   scrollText(hello, 16);
      scrollText(world, 16);
     delay(1000);  
   
  writeText("READ") ;
  for (int i = 0; i&lt; 100; i++) draw();
          delay(5);
  writeText(" MY") ; 
  for (int i = 0; i&lt; 70; i++) draw();
          delay(5);
  writeText("TEXT") ;
  for (int i = 0; i&lt; 100; i++) draw();
   delay(50);
  writeText("    ") ;
  for (int i = 0; i&lt; 50; i++) draw();
  delay(50);
  
  


}
//****************end of loop *********************************

void writeDigit(int positie, int ascii){
  for (int i =0; i&lt; 5;i++){
    tekstDat[(numberOflDisplays * 4 - positie) * 5 + i] = ascii_5x7[ascii*5+i];
  }
}

void scrollText(String tekkst, long howSlow){
  int leng = tekkst.length();
  for (int u=-numberOflDisplays*4;u&lt;leng;u++){ // first N digits will be spaces. N = all digits of display. So one screen blank before first character apears.
    for (int v=0; v&lt; numberOflDisplays*4;v++){
      if (( (u+v) &gt;= 0 ) &amp;&amp; ((u+v) &lt; leng)){ // separete leading and tailing spaces from actual string
        char oneChar= tekkst.charAt(u+v);
        writeDigit(v+1, oneChar); // write the character of the string
      }
      else{
        writeDigit(v+1, 32); // write ascii-value 32 = a space.
      }
    }
    for (long teller = 0; teller &lt; howSlow; teller++){
      draw();   
    }
  }
}

void writeText(String tekst){
  int tl = tekst.length();
  int spacesNeeded = 4 * numberOflDisplays - tl;
  if (spacesNeeded &lt;0){
    tl = 4 * numberOflDisplays;    
  }
  else{
    for (int u = 0; u &lt; spacesNeeded; u++){
      tekst.concat(" ");
    }
    tl = 4 * numberOflDisplays;    
  }
  char tekst_[tl];
  for (int vv = 0; vv &lt; tl; vv++){
    char tt = tekst.charAt(tl-vv-1);
    for (int i =0; i&lt; 5;i++){
      tekstDat[vv*5+i] = ascii_5x7[tt*5+i];
    }
  }
}

void dot(byte x, byte y, boolean oo){
  if ((x &lt; (numberOflDisplays *4 * 5)) &amp;&amp; (y &lt; 7)){
    byte oldByte = tekstDat[x] &amp; (0xFF - (2&lt;&lt;y));
    tekstDat[x] = oldByte | (2&lt;&lt;y);
  }
}

void draw(){
  for (int Kolom = 0; Kolom &lt; 5; Kolom++){ // 5 columns to be strobed
    // pumping in 3 x 4 x 7 bits per one stobe of the column
    for (int displayNo = 0; displayNo &lt; numberOflDisplays; displayNo++){  // number of  displays
      for (int digitNo = 0; digitNo &lt; 4; digitNo++){ // 4 characters per display
        for (int diodeNo = 0; diodeNo &lt; 7; diodeNo++){ // 7 row-elements
          digitalWrite(clock, HIGH);
          digitalWrite(data, tekstDat[Kolom + 5*(displayNo*4 + digitNo) ] &amp;(2&lt;&lt;diodeNo)); // magic
          digitalWrite(clock, LOW);
        }
      }
    }
    digitalWrite(column[Kolom], HIGH);
    delayMicroseconds(brightness);
    digitalWrite(column[Kolom], LOW);
  }
}

